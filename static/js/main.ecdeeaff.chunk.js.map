{"version":3,"sources":["App.js","index.js"],"names":["App","word","React","useState","guessLetter","setGuessLetter","repeat","length","guessWord","setGuessWord","guessSuccess","setGuessSuccess","emptyMessage","class","role","correctGuessMessage","incorrectGuessMessage","className","Form","onSubmit","e","preventDefault","includes","gameWord","split","map","letter","x","i","join","Stack","direction","gap","Control","onChange","event","target","value","type","placeholder","size","Button","variant","style","marginTop","alt","src","rootElement","document","getElementById","createRoot","render"],"mappings":"qMAMe,SAASA,IACtB,IAAMC,EAHc,SAIpB,EAAsCC,IAAMC,SAAS,IAAG,mBAAjDC,EAAW,KAAEC,EAAc,KAClC,EAAkCH,IAAMC,SAAS,IAAIG,OAAOL,EAAKM,SAAQ,mBAAlEC,EAAS,KAAEC,EAAY,KAC9B,EAAwCP,IAAMC,SAAS,GAAE,mBACzD,GADmB,KAAiB,KACID,IAAMC,YAAU,mBAAjDO,EAAY,KAAEC,EAAe,KAC9BC,EACJ,qBAAKC,MAAM,sBAAsBC,KAAK,QAAO,SAAC,uCAI1CC,EACJ,qBAAKF,MAAM,sBAAsBC,KAAK,QAAO,SAAC,0BAI1CE,EACJ,qBAAKH,MAAM,qBAAqBC,KAAK,QAAO,SAAC,4BA2B/C,OACE,sBAAKG,UAAU,MAAK,UAClB,cAACC,EAAA,EAAI,CAACC,SApBiB,SAACC,GAE1B,GADAA,EAAEC,iBACEpB,EAAKqB,SAASlB,GAAc,CAC9B,IAAMmB,EAAWtB,EACduB,MAAM,IACNC,KAAI,SAACC,GAAM,OAAMA,IAAWtB,EAAc,IAAMsB,CAAM,IACzDjB,EACEc,EACGE,KAAI,SAACE,EAAGC,GAAC,MAAuB,MAAjBpB,EAAUoB,GAAaD,EAAInB,EAAUoB,EAAE,IACtDC,KAAK,KAEVlB,GAAgB,EAClB,MACEA,GAAgB,GAElBN,EAAe,GACjB,EAIuC,SACjC,eAACyB,EAAA,EAAK,CAACC,UAAU,aAAaC,IAAK,EAAGf,UAAU,mBAAkB,UAChE,cAACC,EAAA,EAAKe,QAAO,CACXC,SA3BiB,SAACC,GAC1B9B,EAAe8B,EAAMC,OAAOC,MAC9B,EA0BUC,KAAK,SACLC,YAAY,aACZC,KAAK,KACLH,MAAOjC,IAET,cAACqC,EAAA,EACC,CACAC,QAAQ,UACRJ,KAAK,SACLE,KAAK,KAAI,SACV,gBAKL,eAACV,EAAA,EAAK,CAACb,UAAU,mBAAmB0B,MAAO,CAAEC,UAAW,QAAS,UAC9DhC,EACgB,GAAhBF,EAAuBK,EAAsBC,KAEhD,cAACc,EAAA,EAAK,UACJ,6BAAKtB,EAAUgB,MAAM,IAAIC,KAAI,SAACE,GAAC,OAAKA,EAAI,GAAG,QAE7C,cAACG,EAAA,EAAK,UACJ,qBAAKe,IAAI,GAAGC,IAAI,+BAElB,cAAChB,EAAA,EAAK,UACJ,cAACW,EAAA,EAAM,CAACC,QAAQ,SAAQ,SAAC,cAIjC,CCjFA,IAAMK,EAAcC,SAASC,eAAe,QAC/BC,qBAAWH,GAEnBI,OACH,cAAC,aAAU,UACT,cAACnD,EAAG,M","file":"static/js/main.ecdeeaff.chunk.js","sourcesContent":["import React from \"react\";\nimport { Button, Form, Stack } from \"react-bootstrap\";\nimport \"./styles.css\";\n\nconst getWord = () => \"monkey\";\n\nexport default function App() {\n  const word = getWord();\n  const [guessLetter, setGuessLetter] = React.useState(\"\");\n  const [guessWord, setGuessWord] = React.useState(\"_\".repeat(word.length));\n  const [guessedCount, setGuessesCount] = React.useState(0);\n  const [guessSuccess, setGuessSuccess] = React.useState();\n  const emptyMessage = (\n    <div class=\"alert alert-primary\" role=\"alert\">\n      Please enter your guess and submit\n    </div>\n  );\n  const correctGuessMessage = (\n    <div class=\"alert alert-success\" role=\"alert\">\n      Your guess is correct\n    </div>\n  );\n  const incorrectGuessMessage = (\n    <div class=\"alert alert-danger\" role=\"alert\">\n      Your guess is incorrect\n    </div>\n  );\n\n  const handleLetterChange = (event) => {\n    setGuessLetter(event.target.value);\n  };\n\n  const handleLetterSubmit = (e) => {\n    e.preventDefault();\n    if (word.includes(guessLetter)) {\n      const gameWord = word\n        .split(\"\")\n        .map((letter) => (letter !== guessLetter ? \"_\" : letter));\n      setGuessWord(\n        gameWord\n          .map((x, i) => (guessWord[i] === \"_\" ? x : guessWord[i]))\n          .join(\"\")\n      );\n      setGuessSuccess(true);\n    } else {\n      setGuessSuccess(false);\n    }\n    setGuessLetter(\"\");\n  };\n\n  return (\n    <div className=\"App\">\n      <Form onSubmit={handleLetterSubmit}>\n        <Stack direction=\"horizontal\" gap={3} className=\"col-md-8 mx-auto\">\n          <Form.Control\n            onChange={handleLetterChange}\n            type=\"letter\"\n            placeholder=\"Your guess\"\n            size=\"lg\"\n            value={guessLetter}\n          />\n          <Button\n            // disabled={Boolean(error)}\n            variant=\"primary\"\n            type=\"submit\"\n            size=\"lg\"\n          >\n            Submit\n          </Button>\n        </Stack>\n      </Form>\n      <Stack className=\"col-md-8 mx-auto\" style={{ marginTop: \"1rem\" }}>\n        {emptyMessage}\n        {guessSuccess == true ? correctGuessMessage : incorrectGuessMessage}\n      </Stack>\n      <Stack>\n        <h2>{guessWord.split(\"\").map((x) => x + \" \")}</h2>\n      </Stack>\n      <Stack>\n        <img alt=\"\" src=\"./img/hangmanPicture.png\" />\n      </Stack>\n      <Stack>\n        <Button variant=\"danger\">RESET</Button>\n      </Stack>\n    </div>\n  );\n}\n// Kad zodzius trauktu is zodyno\n// messages (aditional)\n// submito disablinimas (jei tuscias)\n// o visokito neleidziam ivest: lowerCase, daugiau raidziu ,skaicius  ir pan.\n// rast paveikslelius 6\n// reset button'a implementuoti - pvz refresh'a browserio\n// kai pralaimim tai kazkas turi ivykti\n// ir kai laimi kazkas ivyksta\n","import { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\n\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);\n"],"sourceRoot":""}