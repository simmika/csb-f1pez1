{"version":3,"sources":["App.js","index.js"],"names":["window","fetch","response","json","responseJson","console","log","Message","guessSuccess","guessesCount","word","guessWord","messageObj","type","message","toUpperCase","className","role","includes","Img","alt","src","width","height","DisplayPlayingApp","handleLetterSubmit","handleLetterChange","guessLetter","Form","onSubmit","Stack","direction","gap","Control","onChange","placeholder","size","maxLength","value","disabled","Button","variant","style","marginTop","split","map","x","onClick","location","reload","App","React","useState","setWord","setGuessLetter","setGuessWord","setGuessesCount","setGuessSuccess","useEffect","getWord","then","result","repeat","length","e","preventDefault","gameWord","letter","i","join","c","event","target","toLowerCase","replaceAll","rootElement","document","getElementById","createRoot","render"],"mappings":"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","file":"static/js/main.1c7e52fb.chunk.js","sourcesContent":["import React from \"react\";\nimport { Button, Form, Stack } from \"react-bootstrap\";\nimport \"./styles.css\";\n\nasync function getWord() {\n  let response = await window.fetch(\n    `https://random-word-api.vercel.app/api?words=1`\n  );\n  let responseJson = await response.json();\n  console.log(responseJson[0]);\n\n  return responseJson[0];\n}\n\nconst Message = ({ guessSuccess, guessesCount, word, guessWord }) => {\n  const messageObj = { type: \"\", message: \"\" };\n  if (guessSuccess === null) {\n    messageObj.type = \"primary\";\n    messageObj.message = \"Please enter your guess and submit\";\n  } else if (guessesCount === 6) {\n    messageObj.type = \"danger\";\n    messageObj.message = `The word was ${word.toUpperCase()}.`;\n    return (\n      <div className={`alert alert-${messageObj.type}`} role=\"alert\">\n        <h4 className=\"alert-heading\">\n          SORRY YOU LOST{\" \"}\n          <span role=\"img\" aria-label=\"loose\">\n            üëæ\n          </span>\n        </h4>\n        <p>\n          The word was <strong>{word.toUpperCase()}</strong>. Better luck next\n          time!\n        </p>\n        <hr></hr>\n        <p>\n          <small>\n            If you want to try again, click the <strong>\"PLAY AGAIN\"</strong>{\" \"}\n            button below.\n          </small>\n        </p>\n      </div>\n    );\n  } else if (!guessSuccess && guessesCount < 6) {\n    messageObj.type = \"danger\";\n    messageObj.message = \"Your guess is incorrect.\";\n  } else if (!guessWord.includes(\"_\")) {\n    messageObj.type = \"success\";\n    messageObj.message = `You won the game! The correct word is ${word.toUpperCase()}`;\n    return (\n      <div className={`alert alert-${messageObj.type}`} role=\"alert\">\n        <h4 className=\"alert-heading\">\n          CONGRATULATIONS!{\" \"}\n          <span role=\"img\" aria-label=\"win\">\n            üèÜ\n          </span>{\" \"}\n        </h4>\n        <p>{messageObj.message}</p>\n        <hr></hr>\n        <p>\n          <small>\n            If you want to play again, click the <strong>\"PLAY AGAIN\"</strong>{\" \"}\n            button below.\n          </small>\n        </p>\n      </div>\n    );\n  } else if (guessSuccess) {\n    messageObj.type = \"success\";\n    messageObj.message = \"Your guess is correct\";\n  }\n  return (\n    <div className={`alert alert-${messageObj.type}`} role=\"alert\">\n      {messageObj.message}\n    </div>\n  );\n};\n\nconst Img = ({ guessesCount }) => (\n  <img\n    className=\"col-md-8 mx-auto\"\n    alt=\"\"\n    src={`./img/hangman${guessesCount + 1}.png`}\n    width=\"200\"\n    height=\"400\"\n  />\n);\n\nconst DisplayPlayingApp = ({\n  handleLetterSubmit,\n  handleLetterChange,\n  guessLetter,\n  guessSuccess,\n  guessWord,\n  guessesCount,\n  word\n}) => {\n  return (\n    <div className=\"App\">\n      <Form onSubmit={handleLetterSubmit}>\n        <Stack direction=\"horizontal\" gap={3} className=\"col-md-8 mx-auto\">\n          <Form.Control\n            onChange={handleLetterChange}\n            type=\"letter\"\n            placeholder=\"Your guess\"\n            size=\"lg\"\n            maxLength=\"1\"\n            value={guessLetter}\n            disabled={!guessWord?.includes(\"_\") || guessesCount === 6}\n          />\n          <Button\n            disabled={!guessLetter}\n            variant=\"primary\"\n            type=\"submit\"\n            size=\"lg\"\n          >\n            Submit\n          </Button>\n        </Stack>\n      </Form>\n      <Stack className=\"col-md-8 mx-auto\" style={{ marginTop: \"1rem\" }}>\n        <Stack>\n          <Message\n            guessSuccess={guessSuccess}\n            guessesCount={guessesCount}\n            word={word}\n            guessWord={guessWord}\n          />\n        </Stack>\n      </Stack>\n      <Stack>\n        <h2>{guessWord?.split(\"\").map((x) => x + \" \")}</h2>\n      </Stack>\n      <Stack>\n        <Img guessesCount={guessesCount} />\n      </Stack>\n      <Stack className=\"col-lg-8 mx-auto\">\n        <Button variant=\"danger\" onClick={() => window.location.reload(false)}>\n          {!guessWord?.includes(\"_\") || guessesCount === 6\n            ? \"PLAY AGAIN\"\n            : \"RESET\"}\n        </Button>\n      </Stack>\n    </div>\n  );\n};\n\nexport default function App() {\n  const [word, setWord] = React.useState();\n  const [guessLetter, setGuessLetter] = React.useState(\"\");\n  const [guessWord, setGuessWord] = React.useState();\n  const [guessesCount, setGuessesCount] = React.useState(0);\n  const [guessSuccess, setGuessSuccess] = React.useState(null);\n\n  React.useEffect(() => {\n    getWord().then((result) => {\n      setWord(result);\n      setGuessWord(\"_\".repeat(result.length));\n    });\n  }, []);\n\n  const handleLetterChange = (event) => {\n    setGuessLetter(\n      event.target.value.toLowerCase().replaceAll(/[^a-zA-Z]+/g, \"\")\n    );\n  };\n\n  const handleLetterSubmit = (e) => {\n    e.preventDefault();\n    if (word.includes(guessLetter)) {\n      const gameWord = word\n        .split(\"\")\n        .map((letter) => (letter !== guessLetter ? \"_\" : letter));\n      setGuessWord(\n        gameWord\n          .map((x, i) => (guessWord[i] === \"_\" ? x : guessWord[i]))\n          .join(\"\")\n      );\n      setGuessSuccess(true);\n    } else {\n      setGuessSuccess(false);\n      setGuessesCount((c) => c + 1);\n    }\n    setGuessLetter(\"\");\n  };\n\n  return (\n    <DisplayPlayingApp\n      handleLetterSubmit={handleLetterSubmit}\n      handleLetterChange={handleLetterChange}\n      guessLetter={guessLetter}\n      guessSuccess={guessSuccess}\n      guessWord={guessWord}\n      guessesCount={guessesCount}\n      word={word}\n    />\n  );\n}\n","// import { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\n\nroot.render(<App />);\n"],"sourceRoot":""}